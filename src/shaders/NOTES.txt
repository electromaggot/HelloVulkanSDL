ONE TRIANGLE Vertex Shader
working out how it works

    outUV = vec2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
    gl_Position = vec4(outUV * 2.0f + -1.0f, 0.0f, 1.0f);

VertexIndex		U	V		X	Y	Z	W
   ---		   --- ---	   --- --- --- ---
	0			0	0	   -1  -1	0	1
	1			2	0		3	0	0	1
	2			0	2		0	3	0	1

    -1        0        1        2        3
     |        |        |        |        |
   #0 12345678 87654321 12345678 87654321 #1 <-- CW
 -1- o--------+--------+--------+--------o
    1|(-1,-1)          |             _-'  (3,0)
    2|        '        U        ' _-'    |
  0- +  -  -  +(0,0)   =  -  - _-'       U
    2|                 1    _-'          =
    1|        '        | _-'             2
  1- +---V=1-----------+'
    1|             _-' (1,1)
    2|        ' _-'
  2- +  -  - _-'
    2|    _-'
    1| _-'
  3- o'  -- V=2
   #2 (0,3)


To make COUNTER-CLOCKWISE, would need:

VertexIndex		U	V		X	Y	Z	W
   ---		   --- ---	   --- --- --- ---
	0			0	0	   -1  -1	0	1
	1			0	2		0	3	0	1
	2			2	0		3	0	0	1

I think this means just reversing the U,V components
(which reverses the X,Y components)

    outUV = vec2(gl_VertexIndex & 2, (gl_VertexIndex << 1) & 2);
    gl_Position = vec4(outUV * 2.0f + -1.0f, 0.0f, 1.0f);

This is of course now compatible with these PIPELINE settings:

	rasterizationState.cullMode = VK_CULL_MODE_REAR_BIT;
	rasterizationState.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE;

Culling of backfaces is more standard.



