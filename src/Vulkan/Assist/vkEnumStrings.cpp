//
// vkEnumStrings.cpp
//	axEngine	Vulkan support
//
//TJ_LATER_NOTE: deprecate this; redundant to the SDK's vulkan.hpp  std::string to_string(Result)
//				 (there is also a version that 'throw's exception on one of these error results)
//		(ours here seems generally more efficient, but oh well)
//
//TJ_MUCH_LATER_NOTE: Wait, verify this!  to_string at some point stopped working to show
//	VkResults, so I had to reintroduce the below.  Also, VkFormatStrings was added & is helpful.
//
// Created 1/29/19 by Tadd Jensen
//	Â© 2019 Megaphone Studios
//
#include <vulkan/vulkan_core.h>

typedef struct {
	VkResult		eNum;
	const char*		string;
} VkErrorMessage;

VkErrorMessage VkErrorMessages[] = {
	{ VK_ERROR_FRAGMENTED_POOL,			"VK_ERROR_FRAGMENTED_POOL"			},	// -12		// 0
	{ VK_ERROR_FORMAT_NOT_SUPPORTED,	"VK_ERROR_FORMAT_NOT_SUPPORTED"		},	// -11		// 1
	{ VK_ERROR_TOO_MANY_OBJECTS,		"VK_ERROR_TOO_MANY_OBJECTS"			},	// -10		// 2
	{ VK_ERROR_INCOMPATIBLE_DRIVER,		"VK_ERROR_INCOMPATIBLE_DRIVER"		},	// -9		// 3
	{ VK_ERROR_FEATURE_NOT_PRESENT,		"VK_ERROR_FEATURE_NOT_PRESENT"		},	// -8		// 4
	{ VK_ERROR_EXTENSION_NOT_PRESENT,	"VK_ERROR_EXTENSION_NOT_PRESENT"	},	// -7		// 5
	{ VK_ERROR_LAYER_NOT_PRESENT,		"VK_ERROR_LAYER_NOT_PRESENT"		},	// -6		// 6
	{ VK_ERROR_MEMORY_MAP_FAILED,		"VK_ERROR_MEMORY_MAP_FAILED"		},	// -5		// 7
	{ VK_ERROR_DEVICE_LOST,				"VK_ERROR_DEVICE_LOST"				},	// -4		// 8
	{ VK_ERROR_INITIALIZATION_FAILED,	"VK_ERROR_INITIALIZATION_FAILED"	},	// -3		// 9
	{ VK_ERROR_OUT_OF_DEVICE_MEMORY,	"VK_ERROR_OUT_OF_DEVICE_MEMORY"		},	// -2		// 10
	{ VK_ERROR_OUT_OF_HOST_MEMORY,		"VK_ERROR_OUT_OF_HOST_MEMORY"		},	// -1		// 11
	{ VK_SUCCESS,						"VK_SUCCESS"						},	//  0		// 12
	{ VK_NOT_READY,						"VK_NOT_READY"						},	//  1		// 13
	{ VK_TIMEOUT,						"VK_TIMEOUT"						},	//  2		// 14
	{ VK_EVENT_SET,						"VK_EVENT_SET"						},	//  3		// 15
	{ VK_EVENT_RESET,					"VK_EVENT_RESET"					},	//  4		// 16
	{ VK_INCOMPLETE,					"VK_INCOMPLETE"						},	//  5 		// 17
	{ VK_ERROR_OUT_OF_POOL_MEMORY,		"VK_ERROR_OUT_OF_POOL_MEMORY"		},	// -1000069000
	{ VK_ERROR_INVALID_EXTERNAL_HANDLE,	"VK_ERROR_INVALID_EXTERNAL_HANDLE"	},	// -1000072003
	{ VK_ERROR_SURFACE_LOST_KHR,		"VK_ERROR_SURFACE_LOST_KHR"			},	// -1000000000
	{ VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,"VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"	},	// -1000000001
	{ VK_SUBOPTIMAL_KHR,				"VK_SUBOPTIMAL_KHR"					},	// 1000001003	[sic]
	{ VK_ERROR_OUT_OF_DATE_KHR,			"VK_ERROR_OUT_OF_DATE_KHR"			},	// -1000001004
	{ VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,"VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"	},	// -1000003001
	{ VK_ERROR_VALIDATION_FAILED_EXT,	"VK_ERROR_VALIDATION_FAILED_EXT"	},	// -1000011001
	{ VK_ERROR_INVALID_SHADER_NV,		"VK_ERROR_INVALID_SHADER_NV"		},	// -1000012000
	{ VK_ERROR_FRAGMENTATION_EXT,		"VK_ERROR_FRAGMENTATION_EXT"		},	// -1000161000
	{ VK_ERROR_NOT_PERMITTED_EXT,		"VK_ERROR_NOT_PERMITTED_EXT"		},	// -1000174001
	/*
	  VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
	  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,

	  VK_RESULT_BEGIN_RANGE = VK_ERROR_FRAGMENTED_POOL,
	  VK_RESULT_END_RANGE = VK_INCOMPLETE,
	  VK_RESULT_RANGE_SIZE = (VK_INCOMPLETE - VK_ERROR_FRAGMENTED_POOL + 1),	*/
};

const int nVkErrorMessages = sizeof(VkErrorMessages) / sizeof(VkErrorMessage);


const char* VkErrorString(VkResult eres)
{
	if (eres >= VK_RESULT_BEGIN_RANGE && eres <= VK_RESULT_END_RANGE)
		return VkErrorMessages[eres - VK_RESULT_BEGIN_RANGE].string;
	for (int iMsg = VK_RESULT_RANGE_SIZE; iMsg < nVkErrorMessages; ++iMsg)
		if (VkErrorMessages[iMsg].eNum == eres)
			return VkErrorMessages[iMsg].string;
	return "unknown error";
}


// Similar but less-rigorous stringification of VkFormat:
//
// (shamelessly copied from "vulkan_core.h" & quick line-substitute in VI*)
// (obviously, only includes the contiguously enumerated formats,
//  so if you need the "442" and "420" formats >= 1000156000, sorry)
// (and yes, of course we're at the whim of inserts into the enum, if ever)
//							(but in the meantime, it's better than nothing)
//									(...if it helps you, "you're welcome!")

const char* VkFormatStrings[] = {
	"VK_FORMAT_UNDEFINED",					// 0
	"VK_FORMAT_R4G4_UNORM_PACK8",			// 1
	"VK_FORMAT_R4G4B4A4_UNORM_PACK16",		// 2
	"VK_FORMAT_B4G4R4A4_UNORM_PACK16",		// 3
	"VK_FORMAT_R5G6B5_UNORM_PACK16",		// 4
	"VK_FORMAT_B5G6R5_UNORM_PACK16",		// 5
	"VK_FORMAT_R5G5B5A1_UNORM_PACK16",		// 6
	"VK_FORMAT_B5G5R5A1_UNORM_PACK16",		// 7
	"VK_FORMAT_A1R5G5B5_UNORM_PACK16",		// 8
	"VK_FORMAT_R8_UNORM",					// 9
	"VK_FORMAT_R8_SNORM",					// 10
	"VK_FORMAT_R8_USCALED",					// 11
	"VK_FORMAT_R8_SSCALED",					// 12
	"VK_FORMAT_R8_UINT",					// 13
	"VK_FORMAT_R8_SINT",					// 14
	"VK_FORMAT_R8_SRGB",					// 15
	"VK_FORMAT_R8G8_UNORM",					// 16
	"VK_FORMAT_R8G8_SNORM",					// 17
	"VK_FORMAT_R8G8_USCALED",				// 18
	"VK_FORMAT_R8G8_SSCALED",				// 19
	"VK_FORMAT_R8G8_UINT",					// 20
	"VK_FORMAT_R8G8_SINT",					// 21
	"VK_FORMAT_R8G8_SRGB",					// 22
	"VK_FORMAT_R8G8B8_UNORM",				// 23
	"VK_FORMAT_R8G8B8_SNORM",				// 24
	"VK_FORMAT_R8G8B8_USCALED",				// 25
	"VK_FORMAT_R8G8B8_SSCALED",				// 26
	"VK_FORMAT_R8G8B8_UINT",				// 27
	"VK_FORMAT_R8G8B8_SINT",				// 28
	"VK_FORMAT_R8G8B8_SRGB",				// 29
	"VK_FORMAT_B8G8R8_UNORM",				// 30
	"VK_FORMAT_B8G8R8_SNORM",				// 31
	"VK_FORMAT_B8G8R8_USCALED",				// 32
	"VK_FORMAT_B8G8R8_SSCALED",				// 33
	"VK_FORMAT_B8G8R8_UINT",				// 34
	"VK_FORMAT_B8G8R8_SINT",				// 35
	"VK_FORMAT_B8G8R8_SRGB",				// 36
	"VK_FORMAT_R8G8B8A8_UNORM",				// 37
	"VK_FORMAT_R8G8B8A8_SNORM",				// 38
	"VK_FORMAT_R8G8B8A8_USCALED",			// 39
	"VK_FORMAT_R8G8B8A8_SSCALED",			// 40
	"VK_FORMAT_R8G8B8A8_UINT",				// 41
	"VK_FORMAT_R8G8B8A8_SINT",				// 42
	"VK_FORMAT_R8G8B8A8_SRGB",				// 43
	"VK_FORMAT_B8G8R8A8_UNORM",				// 44
	"VK_FORMAT_B8G8R8A8_SNORM",				// 45
	"VK_FORMAT_B8G8R8A8_USCALED",			// 46
	"VK_FORMAT_B8G8R8A8_SSCALED",			// 47
	"VK_FORMAT_B8G8R8A8_UINT",				// 48
	"VK_FORMAT_B8G8R8A8_SINT",				// 49
	"VK_FORMAT_B8G8R8A8_SRGB",				// 50
	"VK_FORMAT_A8B8G8R8_UNORM_PACK32",		// 51
	"VK_FORMAT_A8B8G8R8_SNORM_PACK32",		// 52
	"VK_FORMAT_A8B8G8R8_USCALED_PACK32",	// 53
	"VK_FORMAT_A8B8G8R8_SSCALED_PACK32",	// 54
	"VK_FORMAT_A8B8G8R8_UINT_PACK32",		// 55
	"VK_FORMAT_A8B8G8R8_SINT_PACK32",		// 56
	"VK_FORMAT_A8B8G8R8_SRGB_PACK32",		// 57
	"VK_FORMAT_A2R10G10B10_UNORM_PACK32",	// 58
	"VK_FORMAT_A2R10G10B10_SNORM_PACK32",	// 59
	"VK_FORMAT_A2R10G10B10_USCALED_PACK32",	// 60
	"VK_FORMAT_A2R10G10B10_SSCALED_PACK32",	// 61
	"VK_FORMAT_A2R10G10B10_UINT_PACK32",	// 62
	"VK_FORMAT_A2R10G10B10_SINT_PACK32",	// 63
	"VK_FORMAT_A2B10G10R10_UNORM_PACK32",	// 64
	"VK_FORMAT_A2B10G10R10_SNORM_PACK32",	// 65
	"VK_FORMAT_A2B10G10R10_USCALED_PACK32",	// 66
	"VK_FORMAT_A2B10G10R10_SSCALED_PACK32",	// 67
	"VK_FORMAT_A2B10G10R10_UINT_PACK32",	// 68
	"VK_FORMAT_A2B10G10R10_SINT_PACK32",	// 69
	"VK_FORMAT_R16_UNORM",					// 70
	"VK_FORMAT_R16_SNORM",					// 71
	"VK_FORMAT_R16_USCALED",				// 72
	"VK_FORMAT_R16_SSCALED",				// 73
	"VK_FORMAT_R16_UINT",					// 74
	"VK_FORMAT_R16_SINT",					// 75
	"VK_FORMAT_R16_SFLOAT",					// 76
	"VK_FORMAT_R16G16_UNORM",				// 77
	"VK_FORMAT_R16G16_SNORM",				// 78
	"VK_FORMAT_R16G16_USCALED",				// 79
	"VK_FORMAT_R16G16_SSCALED",				// 80
	"VK_FORMAT_R16G16_UINT",				// 81
	"VK_FORMAT_R16G16_SINT",				// 82
	"VK_FORMAT_R16G16_SFLOAT",				// 83
	"VK_FORMAT_R16G16B16_UNORM",			// 84
	"VK_FORMAT_R16G16B16_SNORM",			// 85
	"VK_FORMAT_R16G16B16_USCALED",			// 86
	"VK_FORMAT_R16G16B16_SSCALED",			// 87
	"VK_FORMAT_R16G16B16_UINT",				// 88
	"VK_FORMAT_R16G16B16_SINT",				// 89
	"VK_FORMAT_R16G16B16_SFLOAT",			// 90
	"VK_FORMAT_R16G16B16A16_UNORM",			// 91
	"VK_FORMAT_R16G16B16A16_SNORM",			// 92
	"VK_FORMAT_R16G16B16A16_USCALED",		// 93
	"VK_FORMAT_R16G16B16A16_SSCALED",		// 94
	"VK_FORMAT_R16G16B16A16_UINT",			// 95
	"VK_FORMAT_R16G16B16A16_SINT",			// 96
	"VK_FORMAT_R16G16B16A16_SFLOAT",		// 97
	"VK_FORMAT_R32_UINT",					// 98
	"VK_FORMAT_R32_SINT",					// 99
	"VK_FORMAT_R32_SFLOAT",					// 100
	"VK_FORMAT_R32G32_UINT",				// 101
	"VK_FORMAT_R32G32_SINT",				// 102
	"VK_FORMAT_R32G32_SFLOAT",				// 103
	"VK_FORMAT_R32G32B32_UINT",				// 104
	"VK_FORMAT_R32G32B32_SINT",				// 105
	"VK_FORMAT_R32G32B32_SFLOAT",			// 106
	"VK_FORMAT_R32G32B32A32_UINT",			// 107
	"VK_FORMAT_R32G32B32A32_SINT",			// 108
	"VK_FORMAT_R32G32B32A32_SFLOAT",		// 109
	"VK_FORMAT_R64_UINT",					// 110
	"VK_FORMAT_R64_SINT",					// 111
	"VK_FORMAT_R64_SFLOAT",					// 112
	"VK_FORMAT_R64G64_UINT",				// 113
	"VK_FORMAT_R64G64_SINT",				// 114
	"VK_FORMAT_R64G64_SFLOAT",				// 115
	"VK_FORMAT_R64G64B64_UINT",				// 116
	"VK_FORMAT_R64G64B64_SINT",				// 117
	"VK_FORMAT_R64G64B64_SFLOAT",			// 118
	"VK_FORMAT_R64G64B64A64_UINT",			// 119
	"VK_FORMAT_R64G64B64A64_SINT",			// 120
	"VK_FORMAT_R64G64B64A64_SFLOAT",		// 121
	"VK_FORMAT_B10G11R11_UFLOAT_PACK32",	// 122
	"VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",		// 123
	"VK_FORMAT_D16_UNORM",					// 124
	"VK_FORMAT_X8_D24_UNORM_PACK32",		// 125
	"VK_FORMAT_D32_SFLOAT",					// 126
	"VK_FORMAT_S8_UINT",					// 127
	"VK_FORMAT_D16_UNORM_S8_UINT",			// 128
	"VK_FORMAT_D24_UNORM_S8_UINT",			// 129
	"VK_FORMAT_D32_SFLOAT_S8_UINT",			// 130
	"VK_FORMAT_BC1_RGB_UNORM_BLOCK",		// 131
	"VK_FORMAT_BC1_RGB_SRGB_BLOCK",			// 132
	"VK_FORMAT_BC1_RGBA_UNORM_BLOCK",		// 133
	"VK_FORMAT_BC1_RGBA_SRGB_BLOCK",		// 134
	"VK_FORMAT_BC2_UNORM_BLOCK",			// 135
	"VK_FORMAT_BC2_SRGB_BLOCK",				// 136
	"VK_FORMAT_BC3_UNORM_BLOCK",			// 137
	"VK_FORMAT_BC3_SRGB_BLOCK",				// 138
	"VK_FORMAT_BC4_UNORM_BLOCK",			// 139
	"VK_FORMAT_BC4_SNORM_BLOCK",			// 140
	"VK_FORMAT_BC5_UNORM_BLOCK",			// 141
	"VK_FORMAT_BC5_SNORM_BLOCK",			// 142
	"VK_FORMAT_BC6H_UFLOAT_BLOCK",			// 143
	"VK_FORMAT_BC6H_SFLOAT_BLOCK",			// 144
	"VK_FORMAT_BC7_UNORM_BLOCK",			// 145
	"VK_FORMAT_BC7_SRGB_BLOCK",				// 146
	"VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",	// 147
	"VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",		// 148
	"VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",	// 149
	"VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",	// 150
	"VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",	// 151
	"VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",	// 152
	"VK_FORMAT_EAC_R11_UNORM_BLOCK",		// 153
	"VK_FORMAT_EAC_R11_SNORM_BLOCK",		// 154
	"VK_FORMAT_EAC_R11G11_UNORM_BLOCK",		// 155
	"VK_FORMAT_EAC_R11G11_SNORM_BLOCK",		// 156
	"VK_FORMAT_ASTC_4x4_UNORM_BLOCK",		// 157
	"VK_FORMAT_ASTC_4x4_SRGB_BLOCK",		// 158
	"VK_FORMAT_ASTC_5x4_UNORM_BLOCK",		// 159
	"VK_FORMAT_ASTC_5x4_SRGB_BLOCK",		// 160
	"VK_FORMAT_ASTC_5x5_UNORM_BLOCK",		// 161
	"VK_FORMAT_ASTC_5x5_SRGB_BLOCK",		// 162
	"VK_FORMAT_ASTC_6x5_UNORM_BLOCK",		// 163
	"VK_FORMAT_ASTC_6x5_SRGB_BLOCK",		// 164
	"VK_FORMAT_ASTC_6x6_UNORM_BLOCK",		// 165
	"VK_FORMAT_ASTC_6x6_SRGB_BLOCK",		// 166
	"VK_FORMAT_ASTC_8x5_UNORM_BLOCK",		// 167
	"VK_FORMAT_ASTC_8x5_SRGB_BLOCK",		// 168
	"VK_FORMAT_ASTC_8x6_UNORM_BLOCK",		// 169
	"VK_FORMAT_ASTC_8x6_SRGB_BLOCK",		// 170
	"VK_FORMAT_ASTC_8x8_UNORM_BLOCK",		// 171
	"VK_FORMAT_ASTC_8x8_SRGB_BLOCK",		// 172
	"VK_FORMAT_ASTC_10x5_UNORM_BLOCK",		// 173
	"VK_FORMAT_ASTC_10x5_SRGB_BLOCK",		// 174
	"VK_FORMAT_ASTC_10x6_UNORM_BLOCK",		// 175
	"VK_FORMAT_ASTC_10x6_SRGB_BLOCK",		// 176
	"VK_FORMAT_ASTC_10x8_UNORM_BLOCK",		// 177
	"VK_FORMAT_ASTC_10x8_SRGB_BLOCK",		// 178
	"VK_FORMAT_ASTC_10x10_UNORM_BLOCK",		// 179
	"VK_FORMAT_ASTC_10x10_SRGB_BLOCK",		// 180
	"VK_FORMAT_ASTC_12x10_UNORM_BLOCK",		// 181
	"VK_FORMAT_ASTC_12x10_SRGB_BLOCK",		// 182
	"VK_FORMAT_ASTC_12x12_UNORM_BLOCK",		// 183
	"VK_FORMAT_ASTC_12x12_SRGB_BLOCK"		// 184
};

const int nVkFormatStrings = sizeof(VkFormatStrings) / sizeof(const char*);


const char* VkFormatString(VkFormat efmt)
{
	if (efmt >= 0 && efmt < nVkFormatStrings)
		return VkFormatStrings[efmt];
	return "unknown format";
}



// * - if enum changes, suggested VI substitution:  (contains tab characters)
//	:.,$s@^	\([A-Zx_0-9][A-Zx_0-9]*\) = \([0-9][0-9]*\),@	"\1",		// \2@
//	(i.e. in VI editor, hit : and copy/paste the above command after the :  )